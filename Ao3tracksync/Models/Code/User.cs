//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ao3tracksync.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class User
    {
        public User()
        {

        }

        public User(string username, string email, string roles, string password)
        {
            this.username = username;
            this.email = email;
            this.roles = roles;
            this.hash = Auth.HashHandler.GetHash(password);
        }

        internal static User GetUserWithPassword(string username, string password)
        {
            using (var ctx = new Models.Ao3TrackEntities())
            {
                ctx.Configuration.AutoDetectChangesEnabled = false;
                ctx.Configuration.ProxyCreationEnabled = false;

                var usr = (from u in ctx.Users where u.username == username select u).AsEnumerable().FirstOrDefault();

                if (usr == null)
                    return null;

                if (!Auth.HashHandler.CheckPassword(usr.hash, password))
                    return null;

                return usr;
            }
        }

        internal static User GetUserWithHash(string username, string hash)
        {
            using (var ctx = new Models.Ao3TrackEntities())
            {
                ctx.Configuration.AutoDetectChangesEnabled = false;
                ctx.Configuration.ProxyCreationEnabled = false;

                var usr = (from u in ctx.Users where u.username == username select u).AsEnumerable().FirstOrDefault();

                if (usr == null)
                    return null;

                if (!Auth.HashHandler.CheckHashString(usr.hash, hash))
                    return null;

                return usr;
            }
        }
    }
}
